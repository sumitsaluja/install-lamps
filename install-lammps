#!/bin/bash
#
# This script is used  for installing/running/ploting grpahs for Lamps.
# In this script I used to clone lamps from git repo and then install at user specified location
#
#Software requirements for building lammps
#		openmpi,cmake ffmpeg gnuplot,make,git,FFTW
#
# 05-16-2021  sumitsaluja@ymail.com
################################################################################

export PATH=$PATH:/usr/local/openmpi/1.4.1/bin:/usr/local/cmake/3.16.4/bin
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/openmpi/1.4.1/lib
export LD_LIBRARY_PATH

usage(){
	echo "$0 NAME" >&2
	exit $1
}

if [ "$#" -lt 1 ]; then usage 1; fi

name="$1" 

#setup some predefined variable to be used in this script
softwaredir=/usr/local/"$name"
prefix="$softwaredir"/lamps
bindir="$prefix"/bin
builddir="$softwaredir"/build
BUILD="yes"
Exec="$bindir"/lmp



gclone() {  #function to clone git repo
    git clone -b stable https://github.com/lammps/lammps.git $softwaredir
}


#This function is to build the software at /usr/local/

softwarebuild() {
	pushd $softwaredir
	if [[ $(checksoftware) == "yes" ]]; then
		echo "$test"
		git pull
		mkdir -p "$builddir"
		cd $builddir
		make clean
		cmake ../cmake -D CMAKE_INSTALL_PREFIX:PATH="$prefix" -D  PKG_KSPACE=yes  -D BUILD_MPI=yes -D CMAKE_CXX_COMPILER=mpic++ -D FFT=FFTW3  -D PKG_OPT=yes -D PKG_MOLECULE=yes
		make -j  4
		make install
	fi
	popd
}

#This function chechks whether Lamps already build or not, and ask whether we want to install again or not.
checksoftware() {
	if [ -f $Exec ]; then  #check for  excuteable lmp in bin dir.
		read -p "Lammps are alreday available at $Exec, do you want to rebuild (y/n)? " -n 1 -r
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			BUILD=yes
			echo $BUILD
		else
			BUILD=no
			echo $BUILD
		fi
	else
		BUILD=yes
		echo $BUILD
	fi
}

#This functions  setup path and clone  the Lamps sftare  before building
installsoftware() {
    if [ -d "$softwaredir" ]; then  # Checking directory  name enter bu user is alrady there or not.
        read -p "$softwaredir is already available, do you want to continue installation in same directory(y/n) ? " -n 1 -r  #Ask user whther you want to citinue or not overwriting directory if exist.
        echo -en "\n"
        if [[ $REPLY =~ ^[Yy]$ ]]; then
		    cd $softwaredir
			if [ -d bench ]; then #By checking bench directory, I made decisoion that should I use gut pull or git clone.
				git pull
			else
				gclone
			fi
			softwarebuild
        else
		    echo -en "\nNot installing exit from installation module\n"
		fi
    else
        gclone
        softwarebuild
    fi
}


#This function  is doing benchmark for strong scaling  and calling function for ploting graph.
#In this function user need to submit for how many process  he want to run for mpi task. 

strongscaling(){
    dt=`date +%F_%T | tr -d :-`     # eg 20210516_011159 
	file_name=strongplot_$dt        #  strongplo_20210516_011159
  	if [ -f $Exec ]; then
		export OMP_NUM_THREADS=1
		echo -n "Please enter number of maximum cores (np) for mpi for strong scaling (default is 2): "  #Asking number of cores for  mpi 
		read proc
		[ -z "$proc" ] && proc=2
        np=2
		while [ $np -le $proc ]
		do
		    mpirun -np $np $Exec -in "$softwaredir"/bench/in.lj && grep -i "loop time" log.lammps|awk "{print \$4,\$6}" >> $file_name.txt   #running lammps  and getting looptime vale from log file and adding to  differnt file  for ploting
		  	np=$(( $np + 2 ))
		done
        scalingplot $file_name "Strong"
	fi
}

#This function  is doing benchmark for weak  scaling and calling function for ploting graph.
#In this function user need to submit for how many process  he want to run for mpi task. 
weakscaling(){
    dt=`date +%F_%T | tr -d :-`     # eg 20210516_011159
    file_name=weakplot_$dt
    if [ -f $Exec ]; then
        export OMP_NUM_THREADS=1
		echo -n "Please enter number of maximum cores (np) for mpi for weak scaling (default is 2): "
		read proc
		[ -z "$proc" ] && proc=2
        np=2
		while [ $np -le $proc ]
		do
            mpirun -np $np $Exec -var x 2 -var y 2 -var z 4 -in "$softwaredir"/bench/in.lj && grep -i "loop time" log.lammps|awk "{print \$4,\$6}" >> $file_name.txt #running lammps with increase workload by adding more  resources 
            np=$(( $np + 2 ))
        done
        scalingplot $file_name "Weak"
	fi
}

#This function is  ploting graphs for bith weak and strong scaling  calling from strongscaling and weakscaling functions.
scalingplot() {
  file_name=$1.txt
  file_name1=$1
  $scaling=$2
    echo "set terminal png size 900, 500"                                                    > $file_name1.gpl
     echo "set output '$file_name1.png'"                                                     >> $file_name1.gpl
    echo "set title '$scaling Scaling'"                                                                >> $file_name1.gpl
    echo "set datafile separator whitespace"                                                >> $file_name1.gpl
    echo "set grid"                                                                         >> $file_name1.gpl
    xstart=`awk 'NR==1{print $2}' $file_name`
    xend=`awk 'END{print $2}' $file_name`
    xstart1=`awk 'NR==1{print $2}' $file_name`
    ystart=`awk 'END{print $1}' $file_name| tr ',' ' '`
    yend=`awk 'NR==1{print $1}' $file_name| tr ',' ' '`
    xtics="set xtics("
    while [ $xstart -le $xend ]; do
        xtics="$xtics $xstart,"
        xstart=$((xstart+2))
    done
    echo "`echo $xtics | head -c -2`)"                                                      >> $file_name1.gpl
    echo "set xrange [$xstart1:$xend]"                                                      >> $file_name1.gpl
    echo "set yrange [0:$yend]"                                                             >> $file_name1.gpl
    echo "set ylabel 'loop time'"                                                           >> $file_name1.gpl
    echo "set xlabel 'Cores'"                                                           >> $file_name1.gpl
    echo "set style line 1 lc rgb '#0060ad' lt 1 lw 2 pt 5 ps 1.5"                          >> $file_name1.gpl
    echo "set style line 2 lc rgb '#dd60ad' lt 1 lw 2 pt 7 ps 1.5"                          >> $file_name1.gpl
    echo -n "plot "                                                                         >> $file_name1.gpl
    echo -n "'$file_name' using 2:1:(sprintf(\"(%d)\",2)) title 'Walltime' with linespoints ls 1,"  >> $file_name1.gpl
    gnuplot $file_name1.gpl
}



#------Main--------
#This part  of the script is running continuously and asking choices from user whther user want to install, Quit or Scaling .

while true
do
    echo -en "\nWelcome to lammps installation and run utility\n\n"
	read -p "ENTER (I/R/B/Q)
	[I] to intall
	[S] to run strong scaling benchmark
	[W] to run weak scaling benchmark
	[Q] for Quit" -n 1 -r

	echo -en "\n"
	REPLY=`echo $REPLY|tr '[a-z]' '[A-Z]'`; # Upper case
	case $REPLY in
		I)
			installsoftware ;;
		S)
			strongscaling ;;
		W)
			weakscaling;;
		Q)
			break	;;
		*)
			echo -n "No matching information found"	;;
	esac
done

